name: Notify Discord

on:
  push:
  pull_request:
    types: [opened, closed, reopened, synchronize]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord embed via curl
        run: |
          AUTHOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          EVENT="${{ github.event_name }}"
          AVATAR_URL="https://github.com/${AUTHOR}.png"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          if [ "$EVENT" = "push" ]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            COMMIT_URL="${{ github.event.head_commit.url }}"
            COMMITTER="${{ github.event.head_commit.author.name }}"
            PAYLOAD=$(jq -n \
              --arg author "$AUTHOR" \
              --arg avatar "$AVATAR_URL" \
              --arg repo "$REPO" \
              --arg branch "$BRANCH" \
              --arg commit_message "$COMMIT_MESSAGE" \
              --arg commit_url "$COMMIT_URL" \
              --arg committer "$COMMITTER" \
              --arg event "$EVENT" \
              --arg timestamp "$TIMESTAMP" \
              '{
                "username": "GitHub Bot ü§ñ",
                "embeds": [
                  {
                    "author": {
                      "name": $author,
                      "icon_url": $avatar,
                      "url": "https://github.com/" + $author
                    },
                    "title": "üöÄ Push Event in " + $repo,
                    "description": "üìå Branch: **" + $branch + "**",
                    "color": 3447003,
                    "fields": [
                      {
                        "name": "üë§ Committer",
                        "value": $committer,
                        "inline": true
                      },
                      {
                        "name": "üìù Commit Message",
                        "value": $commit_message,
                        "inline": false
                      },
                      {
                        "name": "üîó Commit URL",
                        "value": "[View Commit](" + $commit_url + ")",
                        "inline": false
                      }
                    ],
                    "footer": {
                      "text": "GitHub Actions ‚Ä¢ " + $event
                    },
                    "timestamp": $timestamp
                  }
                ]
              }'
            )
          else
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_STATE="${{ github.event.pull_request.state }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            PAYLOAD=$(jq -n \
              --arg author "$AUTHOR" \
              --arg avatar "$AVATAR_URL" \
              --arg repo "$REPO" \
              --arg branch "$BRANCH" \
              --arg pr_title "$PR_TITLE" \
              --arg pr_url "$PR_URL" \
              --arg pr_state "$PR_STATE" \
              --arg pr_number "$PR_NUMBER" \
              --arg pr_body "$PR_BODY" \
              --arg event "$EVENT" \
              --arg timestamp "$TIMESTAMP" \
              '{
                "username": "GitHub Bot ü§ñ",
                "embeds": [
                  {
                    "author": {
                      "name": $author,
                      "icon_url": $avatar,
                      "url": "https://github.com/" + $author
                    },
                    "title": "üì• Pull Request #" + $pr_number + ": " + $pr_title,
                    "url": $pr_url,
                    "description": (if $pr_body != "" then $pr_body else "No description provided" end),
                    "color": (if $pr_state == "open" then 5763719 else 15548997 end),
                    "fields": [
                      {
                        "name": "üìå Repository",
                        "value": $repo,
                        "inline": true
                      },
                      {
                        "name": "üåø Branch",
                        "value": $branch,
                        "inline": true
                      },
                      {
                        "name": "üîó PR URL",
                        "value": "[View PR](" + $pr_url + ")",
                        "inline": false
                      }
                    ],
                    "footer": {
                      "text": "GitHub Actions ‚Ä¢ " + $event
                    },
                    "timestamp": $timestamp
                  }
                ]
              }'
            )
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$PAYLOAD" \
               "${{ secrets.DISCORD_WEBHOOK }}"



# This workflow sends a notification to a Discord channel whenever there is a push or pull request event in the repository.
# It uses a JSON payload to create an embed message that includes details about the commit, such as the author, branch, commit message, and a link to the commit.

# Make sure to set the DISCORD_WEBHOOK secret in your repository settings with your Discord webhook URL.

# The workflow uses jq to construct the JSON payload dynamically based on the event type.
# It handles both push events and pull request events, formatting the message accordingly.