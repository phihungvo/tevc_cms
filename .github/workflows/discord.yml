name: Notify Discord on All Changes
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, closed, reopened, synchronize ]
  issues:
    types: [ opened, edited, closed, reopened ]
  issue_comment:
    types: [ created, edited ]
  pull_request_review:
    types: [ submitted, edited, dismissed ]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Send Discord Notification
        run: |
          AUTHOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          EVENT="${{ github.event_name }}"
          ACTION="${{ github.event.action }}"
          AVATAR_URL="https://avatars.githubusercontent.com/u/${{ github.actor }}?v=4"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK }}"

          # Default embed settings
          COLOR=16777215  # M√†u tr·∫Øng l√†m m·∫∑c ƒë·ªãnh
          TITLE=""
          DESCRIPTION=""
          URL=""
          FIELDS="[]"
          FOOTER_TEXT="GitHub Actions ‚Ä¢ $EVENT"

          if [ "$EVENT" = "push" ]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            COMMIT_URL="${{ github.event.head_commit.url }}"
            COMMITTER="${{ github.event.head_commit.author.name }}"
            BRANCH="${{ github.ref_name }}"
            COLOR=3447003  # M√†u xanh l√°
            TITLE="üöÄ New Push to $REPO"
            DESCRIPTION="üìå Branch: **$BRANCH**"
            FIELDS=$(jq -n \
              '[
                {"name": "üë§ Committer", "value": $committer, "inline": true},
                {"name": "üìù Commit Message", "value": $commit_message, "inline": false},
                {"name": "üîó Commit URL", "value": "[View](\($commit_url))", "inline": false}
              ]' --arg commit_message "$COMMIT_MESSAGE" --arg commit_url "$COMMIT_URL" --arg committer "$COMMITTER")
          elif [ "$EVENT" = "pull_request" ]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_STATE="${{ github.event.action }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            COLOR=$(if [ "$PR_STATE" = "opened" ]; then echo 5763719; else echo 15548997; fi)  # Xanh l√° (open), ƒë·ªè (closed)
            TITLE="üì• Pull Request #$PR_NUMBER: $PR_TITLE"
            URL="$PR_URL"
            DESCRIPTION="${{ github.event.pull_request.body }}"
            FIELDS=$(jq -n \
              '[
                {"name": "üìå Repository", "value": $repo, "inline": true},
                {"name": "üåø Branch", "value": $branch, "inline": true},
                {"name": "üîó View PR", "value": "[Open](\($pr_url))", "inline": false}
              ]' --arg repo "$REPO" --arg branch "$BRANCH" --arg pr_url "$PR_URL")
          elif [ "$EVENT" = "issues" ]; then
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            COLOR=16711680  # M√†u ƒë·ªè
            TITLE="üìå Issue $ACTION: $ISSUE_TITLE"
            URL="$ISSUE_URL"
            DESCRIPTION="${{ github.event.issue.body }}"
            FIELDS=$(jq -n \
              '[
                {"name": "üìã State", "value": $action, "inline": true},
                {"name": "üîó View Issue", "value": "[Open](\($issue_url))", "inline": false}
              ]' --arg action "$ACTION" --arg issue_url "$ISSUE_URL")
          elif [ "$EVENT" = "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            COLOR=16776960  # M√†u v√†ng
            TITLE="üí¨ New Comment on Issue"
            URL="$ISSUE_URL"
            DESCRIPTION="$COMMENT_BODY"
            FIELDS=$(jq -n \
              '[
                {"name": "üìå Issue", "value": $issue_url, "inline": false}
              ]' --arg issue_url "$ISSUE_URL")
          elif [ "$EVENT" = "pull_request_review" ]; then
            REVIEW_STATE="${{ github.event.review.state }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            COLOR=$(if [ "$REVIEW_STATE" = "approved" ]; then echo 3066993; elif [ "$REVIEW_STATE" = "changes_requested" ]; then echo 15158332; else echo 10181046; fi)  # Xanh (approved), ƒë·ªè (changes), x√°m (comment)
            TITLE="üëÄ Pull Request Review: $REVIEW_STATE"
            URL="$PR_URL"
            DESCRIPTION="${{ github.event.review.body }}"
            FIELDS=$(jq -n \
              '[
                {"name": "üìå PR", "value": $pr_url, "inline": false}
              ]' --arg pr_url "$PR_URL")
          fi

          # T·∫°o payload JSON
          PAYLOAD=$(jq -n \
            --arg username "GitHub Bot ü§ñ" \
            --arg avatar "$AVATAR_URL" \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION" \
            --arg url "$URL" \
            --argjson fields "$FIELDS" \
            --arg footer_text "$FOOTER_TEXT" \
            --arg timestamp "$TIMESTAMP" \
            --argjson color "$COLOR" \
            '{
              "username": $username,
              "avatar_url": $avatar,
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "url": $url,
                  "color": $color,
                  "fields": $fields,
                  "footer": {"text": $footer_text},
                  "timestamp": $timestamp
                }
              ]
            }')

          # G·ª≠i t·ªõi Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$PAYLOAD" \
               "$WEBHOOK_URL"

# This workflow sends a notification to a Discord channel whenever there is a push or pull request event in the repository.
# It uses a JSON payload to create an embed message that includes details about the commit, such as the author, branch, commit message, and a link to the commit.

# Make sure to set the DISCORD_WEBHOOK secret in your repository settings with your Discord webhook URL.

# The workflow uses jq to construct the JSON payload dynamically based on the event type.
# It handles both push events and pull request events, formatting the message accordingly.