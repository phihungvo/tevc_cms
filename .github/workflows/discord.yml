name: Notify Discord on Project Changes
on:
  issues:
    types: [opened, edited, closed, reopened]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, closed, reopened, synchronize]
  push:
    branches:
      - main

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Send Discord Notification
        run: |
          AUTHOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          EVENT="${{ github.event_name }}"
          AVATAR_URL="https://avatars.githubusercontent.com/u/${{ github.actor }}?v=4"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          if [ "$EVENT" = "issues" ]; then
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            ISSUE_STATE="${{ github.event.action }}"
            PAYLOAD=$(jq -n \
              --arg author "$AUTHOR" \
              --arg avatar "$AVATAR_URL" \
              --arg repo "$REPO" \
              --arg issue_title "$ISSUE_TITLE" \
              --arg issue_url "$ISSUE_URL" \
              --arg issue_state "$ISSUE_STATE" \
              --arg event "$EVENT" \
              --arg timestamp "$TIMESTAMP" \
              '{
                "username": "GitHub Bot ðŸ¤–",
                "embeds": [
                  {
                    "author": {
                      "name": $author,
                      "icon_url": $avatar,
                      "url": "https://github.com/\($author)"
                    },
                    "title": "ðŸ“Œ Issue \($issue_state): \($issue_title)",
                    "url": $issue_url,
                    "color": 16711680,
                    "footer": {
                      "text": "GitHub Actions â€¢ \($event)"
                    },
                    "timestamp": $timestamp
                  }
                ]
              }')
          elif [ "$EVENT" = "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            ISSUE_URL="${{ github.event.issue.html_url }}"
            PAYLOAD=$(jq -n \
              --arg author "$AUTHOR" \
              --arg avatar "$AVATAR_URL" \
              --arg repo "$REPO" \
              --arg comment_body "$COMMENT_BODY" \
              --arg issue_url "$ISSUE_URL" \
              --arg event "$EVENT" \
              --arg timestamp "$TIMESTAMP" \
              '{
                "username": "GitHub Bot ðŸ¤–",
                "embeds": [
                  {
                    "author": {
                      "name": $author,
                      "icon_url": $avatar,
                      "url": "https://github.com/\($author)"
                    },
                    "title": "ðŸ’¬ New Comment on Issue",
                    "url": $issue_url,
                    "description": $comment_body,
                    "color": 16776960,
                    "footer": {
                      "text": "GitHub Actions â€¢ \($event)"
                    },
                    "timestamp": $timestamp
                  }
                ]
              }')
          elif [ "$EVENT" = "pull_request" ]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_STATE="${{ github.event.action }}"
            PAYLOAD=$(jq -n \
              --arg author "$AUTHOR" \
              --arg avatar "$AVATAR_URL" \
              --arg repo "$REPO" \
              --arg pr_title "$PR_TITLE" \
              --arg pr_url "$PR_URL" \
              --arg pr_state "$PR_STATE" \
              --arg event "$EVENT" \
              --arg timestamp "$TIMESTAMP" \
              '{
                "username": "GitHub Bot ðŸ¤–",
                "embeds": [
                  {
                    "author": {
                      "name": $author,
                      "icon_url": $avatar,
                      "url": "https://github.com/\($author)"
                    },
                    "title": "ðŸ“¥ Pull Request \($pr_state): \($pr_title)",
                    "url": $pr_url,
                    "color": 5763719,
                    "footer": {
                      "text": "GitHub Actions â€¢ \($event)"
                    },
                    "timestamp": $timestamp
                  }
                ]
              }')
          elif [ "$EVENT" = "push" ]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            COMMIT_URL="${{ github.event.head_commit.url }}"
            PAYLOAD=$(jq -n \
              --arg author "$AUTHOR" \
              --arg avatar "$AVATAR_URL" \
              --arg repo "$REPO" \
              --arg commit_message "$COMMIT_MESSAGE" \
              --arg commit_url "$COMMIT_URL" \
              --arg event "$EVENT" \
              --arg timestamp "$TIMESTAMP" \
              '{
                "username": "GitHub Bot ðŸ¤–",
                "embeds": [
                  {
                    "author": {
                      "name": $author,
                      "icon_url": $avatar,
                      "url": "https://github.com/\($author)"
                    },
                    "title": "ðŸš€ Push to \($repo)",
                    "description": $commit_message,
                    "color": 3447003,
                    "footer": {
                      "text": "GitHub Actions â€¢ \($event)"
                    },
                    "timestamp": $timestamp
                  }
                ]
              }')
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$PAYLOAD" \
               "${{ secrets.DISCORD_WEBHOOK }}"



# This workflow sends a notification to a Discord channel whenever there is a push or pull request event in the repository.
# It uses a JSON payload to create an embed message that includes details about the commit, such as the author, branch, commit message, and a link to the commit.

# Make sure to set the DISCORD_WEBHOOK secret in your repository settings with your Discord webhook URL.

# The workflow uses jq to construct the JSON payload dynamically based on the event type.
# It handles both push events and pull request events, formatting the message accordingly.